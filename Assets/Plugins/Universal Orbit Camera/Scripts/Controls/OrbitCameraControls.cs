//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Plugins/Universal Orbit Camera/Scripts/Controls/OrbitCameraControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @OrbitCameraControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @OrbitCameraControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""OrbitCameraControls"",
    ""maps"": [
        {
            ""name"": ""OrbitMap"",
            ""id"": ""5f3b114b-61e9-4040-b44b-00aa820b165b"",
            ""actions"": [
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""3d298f7b-4de2-4c22-a9a0-48283094a1dd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""44a435de-cd60-4a53-b945-0a63bd72c0e6"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Reset"",
                    ""type"": ""Button"",
                    ""id"": ""95fe68a0-a094-4119-bedb-49c12a690cef"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseRotateButton"",
                    ""type"": ""Button"",
                    ""id"": ""14345bad-fe1e-472d-aa06-0b61bf23d571"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""feb6de93-1b58-4a9a-b452-25e32fa0eb3b"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf267b64-60e5-40be-9d2c-123ebb7a11e5"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis - Gamepad"",
                    ""id"": ""f80645db-0a88-4fe9-b07d-7d4f41802025"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""6160a759-f5d7-4bce-898a-15a3c895cb4d"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""ad93441b-57d6-4588-bb49-544bb007c956"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5c2d9560-71f1-4cfb-ac69-900804267d36"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": ""Clamp(min=-10,max=10)"",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4fcdb573-b680-4a2b-a5f0-5168624dcfe4"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""61758a06-5338-47aa-85e5-c733a9431db7"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51c3dc87-0099-46bb-85be-ec91b43fa064"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32eaadf9-06a8-4cd2-8d25-9dd5b2bd9f19"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseRotateButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // OrbitMap
        m_OrbitMap = asset.FindActionMap("OrbitMap", throwIfNotFound: true);
        m_OrbitMap_Rotation = m_OrbitMap.FindAction("Rotation", throwIfNotFound: true);
        m_OrbitMap_Zoom = m_OrbitMap.FindAction("Zoom", throwIfNotFound: true);
        m_OrbitMap_Reset = m_OrbitMap.FindAction("Reset", throwIfNotFound: true);
        m_OrbitMap_MouseRotateButton = m_OrbitMap.FindAction("MouseRotateButton", throwIfNotFound: true);
    }

    ~@OrbitCameraControls()
    {
        UnityEngine.Debug.Assert(!m_OrbitMap.enabled, "This will cause a leak and performance issues, OrbitCameraControls.OrbitMap.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // OrbitMap
    private readonly InputActionMap m_OrbitMap;
    private List<IOrbitMapActions> m_OrbitMapActionsCallbackInterfaces = new List<IOrbitMapActions>();
    private readonly InputAction m_OrbitMap_Rotation;
    private readonly InputAction m_OrbitMap_Zoom;
    private readonly InputAction m_OrbitMap_Reset;
    private readonly InputAction m_OrbitMap_MouseRotateButton;
    public struct OrbitMapActions
    {
        private @OrbitCameraControls m_Wrapper;
        public OrbitMapActions(@OrbitCameraControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotation => m_Wrapper.m_OrbitMap_Rotation;
        public InputAction @Zoom => m_Wrapper.m_OrbitMap_Zoom;
        public InputAction @Reset => m_Wrapper.m_OrbitMap_Reset;
        public InputAction @MouseRotateButton => m_Wrapper.m_OrbitMap_MouseRotateButton;
        public InputActionMap Get() { return m_Wrapper.m_OrbitMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OrbitMapActions set) { return set.Get(); }
        public void AddCallbacks(IOrbitMapActions instance)
        {
            if (instance == null || m_Wrapper.m_OrbitMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OrbitMapActionsCallbackInterfaces.Add(instance);
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
            @Zoom.started += instance.OnZoom;
            @Zoom.performed += instance.OnZoom;
            @Zoom.canceled += instance.OnZoom;
            @Reset.started += instance.OnReset;
            @Reset.performed += instance.OnReset;
            @Reset.canceled += instance.OnReset;
            @MouseRotateButton.started += instance.OnMouseRotateButton;
            @MouseRotateButton.performed += instance.OnMouseRotateButton;
            @MouseRotateButton.canceled += instance.OnMouseRotateButton;
        }

        private void UnregisterCallbacks(IOrbitMapActions instance)
        {
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
            @Zoom.started -= instance.OnZoom;
            @Zoom.performed -= instance.OnZoom;
            @Zoom.canceled -= instance.OnZoom;
            @Reset.started -= instance.OnReset;
            @Reset.performed -= instance.OnReset;
            @Reset.canceled -= instance.OnReset;
            @MouseRotateButton.started -= instance.OnMouseRotateButton;
            @MouseRotateButton.performed -= instance.OnMouseRotateButton;
            @MouseRotateButton.canceled -= instance.OnMouseRotateButton;
        }

        public void RemoveCallbacks(IOrbitMapActions instance)
        {
            if (m_Wrapper.m_OrbitMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOrbitMapActions instance)
        {
            foreach (var item in m_Wrapper.m_OrbitMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OrbitMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OrbitMapActions @OrbitMap => new OrbitMapActions(this);
    public interface IOrbitMapActions
    {
        void OnRotation(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
        void OnReset(InputAction.CallbackContext context);
        void OnMouseRotateButton(InputAction.CallbackContext context);
    }
}
